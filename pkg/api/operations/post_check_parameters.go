// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPostCheckParams creates a new PostCheckParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPostCheckParams() *PostCheckParams {
	return &PostCheckParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPostCheckParamsWithTimeout creates a new PostCheckParams object
// with the ability to set a timeout on a request.
func NewPostCheckParamsWithTimeout(timeout time.Duration) *PostCheckParams {
	return &PostCheckParams{
		timeout: timeout,
	}
}

// NewPostCheckParamsWithContext creates a new PostCheckParams object
// with the ability to set a context for a request.
func NewPostCheckParamsWithContext(ctx context.Context) *PostCheckParams {
	return &PostCheckParams{
		Context: ctx,
	}
}

// NewPostCheckParamsWithHTTPClient creates a new PostCheckParams object
// with the ability to set a custom HTTPClient for a request.
func NewPostCheckParamsWithHTTPClient(client *http.Client) *PostCheckParams {
	return &PostCheckParams{
		HTTPClient: client,
	}
}

/*
PostCheckParams contains all the parameters to send to the API endpoint

	for the post check operation.

	Typically these are written to a http.Request.
*/
type PostCheckParams struct {

	/* APIKey.

	   Set to get Premium API access: <a target='_blank' href='https://languagetool.org/editor/settings/access-tokens'>your API key</a>

	   Format: password
	*/
	APIKey *strfmt.Password

	/* Data.

	     The text to be checked, given as a JSON document that specifies what's text and what's markup. This or 'text' is required. Markup will be ignored when looking for errors. Example text: <pre>A &lt;b>test&lt;/b></pre>JSON for the example text: <pre>{"annotation":[
	 {"text": "A "},
	 {"markup": "&lt;b>"},
	 {"text": "test"},
	 {"markup": "&lt;/b>"}
	]}</pre> <p>If you have markup that should be interpreted as whitespace, like <tt>&lt;p&gt;</tt> in HTML, you can have it interpreted like this: <pre>{"markup": "&lt;p&gt;", "interpretAs": "\n\n"}</pre><p>The 'data' feature is not limited to HTML or XML, it can be used for any kind of markup. Entities will need to be expanded in this input.
	*/
	Data *string

	/* Dicts.

	   Comma-separated list of dictionaries to include words from; uses special default dictionary if this is unset
	*/
	Dicts *string

	/* DisabledCategories.

	   IDs of categories to be disabled, comma-separated
	*/
	DisabledCategories *string

	/* DisabledRules.

	   IDs of rules to be disabled, comma-separated
	*/
	DisabledRules *string

	/* EnabledCategories.

	   IDs of categories to be enabled, comma-separated
	*/
	EnabledCategories *string

	/* EnabledOnly.

	   If true, only the rules and categories whose IDs are specified with `enabledRules` or `enabledCategories` are enabled.
	*/
	EnabledOnly *bool

	/* EnabledRules.

	   IDs of rules to be enabled, comma-separated. Note that 'level' still applies, so the rule won't run unless 'level' is set to a level that activates the rule.
	*/
	EnabledRules *string

	/* Language.

	   A language code like `en-US`, `de-DE`, `fr`, or `auto` to guess the language automatically (see `preferredVariants` below). For languages with variants (English, German, Portuguese) spell checking will only be activated when you specify the variant, e.g. `en-GB` instead of just `en`.
	*/
	Language string

	/* Level.

	   If set to `picky`, additional rules will be activated, i.e. rules that you might only find useful when checking formal text.
	*/
	Level *string

	/* MotherTongue.

	   A language code of the user's native language, enabling false friends checks for some language pairs.
	*/
	MotherTongue *string

	/* PreferredVariants.

	   Comma-separated list of preferred language variants. The language detector used with `language=auto` can detect e.g. English, but it cannot decide whether British English or American English is used. Thus this parameter can be used to specify the preferred variants like `en-GB` and `de-AT`. Only available with `language=auto`. You should set variants for at least German and English, as otherwise the spell checking will not work for those, as no spelling dictionary can be selected for just `en` or `de`.
	*/
	PreferredVariants *string

	/* Text.

	   The text to be checked. This or 'data' is required.
	*/
	Text *string

	/* Username.

	   Set to get Premium API access: Your username/email as used to log in at languagetool.org.
	*/
	Username *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post check params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostCheckParams) WithDefaults() *PostCheckParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post check params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostCheckParams) SetDefaults() {
	var (
		enabledOnlyDefault = bool(false)
	)

	val := PostCheckParams{
		EnabledOnly: &enabledOnlyDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the post check params
func (o *PostCheckParams) WithTimeout(timeout time.Duration) *PostCheckParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post check params
func (o *PostCheckParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post check params
func (o *PostCheckParams) WithContext(ctx context.Context) *PostCheckParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post check params
func (o *PostCheckParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post check params
func (o *PostCheckParams) WithHTTPClient(client *http.Client) *PostCheckParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post check params
func (o *PostCheckParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIKey adds the aPIKey to the post check params
func (o *PostCheckParams) WithAPIKey(aPIKey *strfmt.Password) *PostCheckParams {
	o.SetAPIKey(aPIKey)
	return o
}

// SetAPIKey adds the apiKey to the post check params
func (o *PostCheckParams) SetAPIKey(aPIKey *strfmt.Password) {
	o.APIKey = aPIKey
}

// WithData adds the data to the post check params
func (o *PostCheckParams) WithData(data *string) *PostCheckParams {
	o.SetData(data)
	return o
}

// SetData adds the data to the post check params
func (o *PostCheckParams) SetData(data *string) {
	o.Data = data
}

// WithDicts adds the dicts to the post check params
func (o *PostCheckParams) WithDicts(dicts *string) *PostCheckParams {
	o.SetDicts(dicts)
	return o
}

// SetDicts adds the dicts to the post check params
func (o *PostCheckParams) SetDicts(dicts *string) {
	o.Dicts = dicts
}

// WithDisabledCategories adds the disabledCategories to the post check params
func (o *PostCheckParams) WithDisabledCategories(disabledCategories *string) *PostCheckParams {
	o.SetDisabledCategories(disabledCategories)
	return o
}

// SetDisabledCategories adds the disabledCategories to the post check params
func (o *PostCheckParams) SetDisabledCategories(disabledCategories *string) {
	o.DisabledCategories = disabledCategories
}

// WithDisabledRules adds the disabledRules to the post check params
func (o *PostCheckParams) WithDisabledRules(disabledRules *string) *PostCheckParams {
	o.SetDisabledRules(disabledRules)
	return o
}

// SetDisabledRules adds the disabledRules to the post check params
func (o *PostCheckParams) SetDisabledRules(disabledRules *string) {
	o.DisabledRules = disabledRules
}

// WithEnabledCategories adds the enabledCategories to the post check params
func (o *PostCheckParams) WithEnabledCategories(enabledCategories *string) *PostCheckParams {
	o.SetEnabledCategories(enabledCategories)
	return o
}

// SetEnabledCategories adds the enabledCategories to the post check params
func (o *PostCheckParams) SetEnabledCategories(enabledCategories *string) {
	o.EnabledCategories = enabledCategories
}

// WithEnabledOnly adds the enabledOnly to the post check params
func (o *PostCheckParams) WithEnabledOnly(enabledOnly *bool) *PostCheckParams {
	o.SetEnabledOnly(enabledOnly)
	return o
}

// SetEnabledOnly adds the enabledOnly to the post check params
func (o *PostCheckParams) SetEnabledOnly(enabledOnly *bool) {
	o.EnabledOnly = enabledOnly
}

// WithEnabledRules adds the enabledRules to the post check params
func (o *PostCheckParams) WithEnabledRules(enabledRules *string) *PostCheckParams {
	o.SetEnabledRules(enabledRules)
	return o
}

// SetEnabledRules adds the enabledRules to the post check params
func (o *PostCheckParams) SetEnabledRules(enabledRules *string) {
	o.EnabledRules = enabledRules
}

// WithLanguage adds the language to the post check params
func (o *PostCheckParams) WithLanguage(language string) *PostCheckParams {
	o.SetLanguage(language)
	return o
}

// SetLanguage adds the language to the post check params
func (o *PostCheckParams) SetLanguage(language string) {
	o.Language = language
}

// WithLevel adds the level to the post check params
func (o *PostCheckParams) WithLevel(level *string) *PostCheckParams {
	o.SetLevel(level)
	return o
}

// SetLevel adds the level to the post check params
func (o *PostCheckParams) SetLevel(level *string) {
	o.Level = level
}

// WithMotherTongue adds the motherTongue to the post check params
func (o *PostCheckParams) WithMotherTongue(motherTongue *string) *PostCheckParams {
	o.SetMotherTongue(motherTongue)
	return o
}

// SetMotherTongue adds the motherTongue to the post check params
func (o *PostCheckParams) SetMotherTongue(motherTongue *string) {
	o.MotherTongue = motherTongue
}

// WithPreferredVariants adds the preferredVariants to the post check params
func (o *PostCheckParams) WithPreferredVariants(preferredVariants *string) *PostCheckParams {
	o.SetPreferredVariants(preferredVariants)
	return o
}

// SetPreferredVariants adds the preferredVariants to the post check params
func (o *PostCheckParams) SetPreferredVariants(preferredVariants *string) {
	o.PreferredVariants = preferredVariants
}

// WithText adds the text to the post check params
func (o *PostCheckParams) WithText(text *string) *PostCheckParams {
	o.SetText(text)
	return o
}

// SetText adds the text to the post check params
func (o *PostCheckParams) SetText(text *string) {
	o.Text = text
}

// WithUsername adds the username to the post check params
func (o *PostCheckParams) WithUsername(username *string) *PostCheckParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the post check params
func (o *PostCheckParams) SetUsername(username *string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *PostCheckParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.APIKey != nil {

		// form param apiKey
		var frAPIKey strfmt.Password
		if o.APIKey != nil {
			frAPIKey = *o.APIKey
		}
		fAPIKey := frAPIKey.String()
		if fAPIKey != "" {
			if err := r.SetFormParam("apiKey", fAPIKey); err != nil {
				return err
			}
		}
	}

	if o.Data != nil {

		// form param data
		var frData string
		if o.Data != nil {
			frData = *o.Data
		}
		fData := frData
		if fData != "" {
			if err := r.SetFormParam("data", fData); err != nil {
				return err
			}
		}
	}

	if o.Dicts != nil {

		// form param dicts
		var frDicts string
		if o.Dicts != nil {
			frDicts = *o.Dicts
		}
		fDicts := frDicts
		if fDicts != "" {
			if err := r.SetFormParam("dicts", fDicts); err != nil {
				return err
			}
		}
	}

	if o.DisabledCategories != nil {

		// form param disabledCategories
		var frDisabledCategories string
		if o.DisabledCategories != nil {
			frDisabledCategories = *o.DisabledCategories
		}
		fDisabledCategories := frDisabledCategories
		if fDisabledCategories != "" {
			if err := r.SetFormParam("disabledCategories", fDisabledCategories); err != nil {
				return err
			}
		}
	}

	if o.DisabledRules != nil {

		// form param disabledRules
		var frDisabledRules string
		if o.DisabledRules != nil {
			frDisabledRules = *o.DisabledRules
		}
		fDisabledRules := frDisabledRules
		if fDisabledRules != "" {
			if err := r.SetFormParam("disabledRules", fDisabledRules); err != nil {
				return err
			}
		}
	}

	if o.EnabledCategories != nil {

		// form param enabledCategories
		var frEnabledCategories string
		if o.EnabledCategories != nil {
			frEnabledCategories = *o.EnabledCategories
		}
		fEnabledCategories := frEnabledCategories
		if fEnabledCategories != "" {
			if err := r.SetFormParam("enabledCategories", fEnabledCategories); err != nil {
				return err
			}
		}
	}

	if o.EnabledOnly != nil {

		// form param enabledOnly
		var frEnabledOnly bool
		if o.EnabledOnly != nil {
			frEnabledOnly = *o.EnabledOnly
		}
		fEnabledOnly := swag.FormatBool(frEnabledOnly)
		if fEnabledOnly != "" {
			if err := r.SetFormParam("enabledOnly", fEnabledOnly); err != nil {
				return err
			}
		}
	}

	if o.EnabledRules != nil {

		// form param enabledRules
		var frEnabledRules string
		if o.EnabledRules != nil {
			frEnabledRules = *o.EnabledRules
		}
		fEnabledRules := frEnabledRules
		if fEnabledRules != "" {
			if err := r.SetFormParam("enabledRules", fEnabledRules); err != nil {
				return err
			}
		}
	}

	// form param language
	frLanguage := o.Language
	fLanguage := frLanguage
	if fLanguage != "" {
		if err := r.SetFormParam("language", fLanguage); err != nil {
			return err
		}
	}

	if o.Level != nil {

		// form param level
		var frLevel string
		if o.Level != nil {
			frLevel = *o.Level
		}
		fLevel := frLevel
		if fLevel != "" {
			if err := r.SetFormParam("level", fLevel); err != nil {
				return err
			}
		}
	}

	if o.MotherTongue != nil {

		// form param motherTongue
		var frMotherTongue string
		if o.MotherTongue != nil {
			frMotherTongue = *o.MotherTongue
		}
		fMotherTongue := frMotherTongue
		if fMotherTongue != "" {
			if err := r.SetFormParam("motherTongue", fMotherTongue); err != nil {
				return err
			}
		}
	}

	if o.PreferredVariants != nil {

		// form param preferredVariants
		var frPreferredVariants string
		if o.PreferredVariants != nil {
			frPreferredVariants = *o.PreferredVariants
		}
		fPreferredVariants := frPreferredVariants
		if fPreferredVariants != "" {
			if err := r.SetFormParam("preferredVariants", fPreferredVariants); err != nil {
				return err
			}
		}
	}

	if o.Text != nil {

		// form param text
		var frText string
		if o.Text != nil {
			frText = *o.Text
		}
		fText := frText
		if fText != "" {
			if err := r.SetFormParam("text", fText); err != nil {
				return err
			}
		}
	}

	if o.Username != nil {

		// form param username
		var frUsername string
		if o.Username != nil {
			frUsername = *o.Username
		}
		fUsername := frUsername
		if fUsername != "" {
			if err := r.SetFormParam("username", fUsername); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
