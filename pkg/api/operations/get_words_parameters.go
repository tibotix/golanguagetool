// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetWordsParams creates a new GetWordsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetWordsParams() *GetWordsParams {
	return &GetWordsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetWordsParamsWithTimeout creates a new GetWordsParams object
// with the ability to set a timeout on a request.
func NewGetWordsParamsWithTimeout(timeout time.Duration) *GetWordsParams {
	return &GetWordsParams{
		timeout: timeout,
	}
}

// NewGetWordsParamsWithContext creates a new GetWordsParams object
// with the ability to set a context for a request.
func NewGetWordsParamsWithContext(ctx context.Context) *GetWordsParams {
	return &GetWordsParams{
		Context: ctx,
	}
}

// NewGetWordsParamsWithHTTPClient creates a new GetWordsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetWordsParamsWithHTTPClient(client *http.Client) *GetWordsParams {
	return &GetWordsParams{
		HTTPClient: client,
	}
}

/*
GetWordsParams contains all the parameters to send to the API endpoint

	for the get words operation.

	Typically these are written to a http.Request.
*/
type GetWordsParams struct {

	/* APIKey.

	   <a target='_blank' href='https://languagetool.org/editor/settings/access-tokens'>Your API key</a>

	   Format: password
	*/
	APIKey strfmt.Password

	/* Dicts.

	   Comma-separated list of dictionaries to include words from; uses special default dictionary if this is unset
	*/
	Dicts *string

	/* Limit.

	   Maximum number of words to return. Defaults to 10.
	*/
	Limit *int64

	/* Offset.

	   Offset of where to start in the list of words. Defaults to 0.
	*/
	Offset *int64

	/* Username.

	   Your username as used to log in at languagetool.org.
	*/
	Username string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get words params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetWordsParams) WithDefaults() *GetWordsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get words params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetWordsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get words params
func (o *GetWordsParams) WithTimeout(timeout time.Duration) *GetWordsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get words params
func (o *GetWordsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get words params
func (o *GetWordsParams) WithContext(ctx context.Context) *GetWordsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get words params
func (o *GetWordsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get words params
func (o *GetWordsParams) WithHTTPClient(client *http.Client) *GetWordsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get words params
func (o *GetWordsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIKey adds the aPIKey to the get words params
func (o *GetWordsParams) WithAPIKey(aPIKey strfmt.Password) *GetWordsParams {
	o.SetAPIKey(aPIKey)
	return o
}

// SetAPIKey adds the apiKey to the get words params
func (o *GetWordsParams) SetAPIKey(aPIKey strfmt.Password) {
	o.APIKey = aPIKey
}

// WithDicts adds the dicts to the get words params
func (o *GetWordsParams) WithDicts(dicts *string) *GetWordsParams {
	o.SetDicts(dicts)
	return o
}

// SetDicts adds the dicts to the get words params
func (o *GetWordsParams) SetDicts(dicts *string) {
	o.Dicts = dicts
}

// WithLimit adds the limit to the get words params
func (o *GetWordsParams) WithLimit(limit *int64) *GetWordsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get words params
func (o *GetWordsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get words params
func (o *GetWordsParams) WithOffset(offset *int64) *GetWordsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get words params
func (o *GetWordsParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithUsername adds the username to the get words params
func (o *GetWordsParams) WithUsername(username string) *GetWordsParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the get words params
func (o *GetWordsParams) SetUsername(username string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *GetWordsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param apiKey
	qrAPIKey := o.APIKey
	qAPIKey := qrAPIKey.String()
	if qAPIKey != "" {

		if err := r.SetQueryParam("apiKey", qAPIKey); err != nil {
			return err
		}
	}

	if o.Dicts != nil {

		// query param dicts
		var qrDicts string

		if o.Dicts != nil {
			qrDicts = *o.Dicts
		}
		qDicts := qrDicts
		if qDicts != "" {

			if err := r.SetQueryParam("dicts", qDicts); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	// query param username
	qrUsername := o.Username
	qUsername := qrUsername
	if qUsername != "" {

		if err := r.SetQueryParam("username", qUsername); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
