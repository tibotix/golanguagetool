// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostWordsDeleteParams creates a new PostWordsDeleteParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPostWordsDeleteParams() *PostWordsDeleteParams {
	return &PostWordsDeleteParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPostWordsDeleteParamsWithTimeout creates a new PostWordsDeleteParams object
// with the ability to set a timeout on a request.
func NewPostWordsDeleteParamsWithTimeout(timeout time.Duration) *PostWordsDeleteParams {
	return &PostWordsDeleteParams{
		timeout: timeout,
	}
}

// NewPostWordsDeleteParamsWithContext creates a new PostWordsDeleteParams object
// with the ability to set a context for a request.
func NewPostWordsDeleteParamsWithContext(ctx context.Context) *PostWordsDeleteParams {
	return &PostWordsDeleteParams{
		Context: ctx,
	}
}

// NewPostWordsDeleteParamsWithHTTPClient creates a new PostWordsDeleteParams object
// with the ability to set a custom HTTPClient for a request.
func NewPostWordsDeleteParamsWithHTTPClient(client *http.Client) *PostWordsDeleteParams {
	return &PostWordsDeleteParams{
		HTTPClient: client,
	}
}

/*
PostWordsDeleteParams contains all the parameters to send to the API endpoint

	for the post words delete operation.

	Typically these are written to a http.Request.
*/
type PostWordsDeleteParams struct {

	/* APIKey.

	   <a target='_blank' href='https://languagetool.org/editor/settings/access-tokens'>Your API key</a>

	   Format: password
	*/
	APIKey strfmt.Password

	/* Dict.

	   Name of the dictionary to remove the word from; if the dictionary is empty upon calling this, it is deleted; if unset, removes from special default dictionary
	*/
	Dict *string

	/* Username.

	   Your username as used to log in at languagetool.org.
	*/
	Username string

	/* Word.

	   The word to be removed.
	*/
	Word string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post words delete params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostWordsDeleteParams) WithDefaults() *PostWordsDeleteParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post words delete params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostWordsDeleteParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the post words delete params
func (o *PostWordsDeleteParams) WithTimeout(timeout time.Duration) *PostWordsDeleteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post words delete params
func (o *PostWordsDeleteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post words delete params
func (o *PostWordsDeleteParams) WithContext(ctx context.Context) *PostWordsDeleteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post words delete params
func (o *PostWordsDeleteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post words delete params
func (o *PostWordsDeleteParams) WithHTTPClient(client *http.Client) *PostWordsDeleteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post words delete params
func (o *PostWordsDeleteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIKey adds the aPIKey to the post words delete params
func (o *PostWordsDeleteParams) WithAPIKey(aPIKey strfmt.Password) *PostWordsDeleteParams {
	o.SetAPIKey(aPIKey)
	return o
}

// SetAPIKey adds the apiKey to the post words delete params
func (o *PostWordsDeleteParams) SetAPIKey(aPIKey strfmt.Password) {
	o.APIKey = aPIKey
}

// WithDict adds the dict to the post words delete params
func (o *PostWordsDeleteParams) WithDict(dict *string) *PostWordsDeleteParams {
	o.SetDict(dict)
	return o
}

// SetDict adds the dict to the post words delete params
func (o *PostWordsDeleteParams) SetDict(dict *string) {
	o.Dict = dict
}

// WithUsername adds the username to the post words delete params
func (o *PostWordsDeleteParams) WithUsername(username string) *PostWordsDeleteParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the post words delete params
func (o *PostWordsDeleteParams) SetUsername(username string) {
	o.Username = username
}

// WithWord adds the word to the post words delete params
func (o *PostWordsDeleteParams) WithWord(word string) *PostWordsDeleteParams {
	o.SetWord(word)
	return o
}

// SetWord adds the word to the post words delete params
func (o *PostWordsDeleteParams) SetWord(word string) {
	o.Word = word
}

// WriteToRequest writes these params to a swagger request
func (o *PostWordsDeleteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param apiKey
	frAPIKey := o.APIKey
	fAPIKey := frAPIKey.String()
	if fAPIKey != "" {
		if err := r.SetFormParam("apiKey", fAPIKey); err != nil {
			return err
		}
	}

	if o.Dict != nil {

		// form param dict
		var frDict string
		if o.Dict != nil {
			frDict = *o.Dict
		}
		fDict := frDict
		if fDict != "" {
			if err := r.SetFormParam("dict", fDict); err != nil {
				return err
			}
		}
	}

	// form param username
	frUsername := o.Username
	fUsername := frUsername
	if fUsername != "" {
		if err := r.SetFormParam("username", fUsername); err != nil {
			return err
		}
	}

	// form param word
	frWord := o.Word
	fWord := frWord
	if fWord != "" {
		if err := r.SetFormParam("word", fWord); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
