// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostWordsAddReader is a Reader for the PostWordsAdd structure.
type PostWordsAddReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostWordsAddReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostWordsAddOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[POST /words/add] PostWordsAdd", response, response.Code())
	}
}

// NewPostWordsAddOK creates a PostWordsAddOK with default headers values
func NewPostWordsAddOK() *PostWordsAddOK {
	return &PostWordsAddOK{}
}

/*
PostWordsAddOK describes a response with status code 200, with default header values.

the result of adding the word
*/
type PostWordsAddOK struct {
	Payload *PostWordsAddOKBody
}

// IsSuccess returns true when this post words add o k response has a 2xx status code
func (o *PostWordsAddOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post words add o k response has a 3xx status code
func (o *PostWordsAddOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post words add o k response has a 4xx status code
func (o *PostWordsAddOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post words add o k response has a 5xx status code
func (o *PostWordsAddOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post words add o k response a status code equal to that given
func (o *PostWordsAddOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post words add o k response
func (o *PostWordsAddOK) Code() int {
	return 200
}

func (o *PostWordsAddOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /words/add][%d] postWordsAddOK %s", 200, payload)
}

func (o *PostWordsAddOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /words/add][%d] postWordsAddOK %s", 200, payload)
}

func (o *PostWordsAddOK) GetPayload() *PostWordsAddOKBody {
	return o.Payload
}

func (o *PostWordsAddOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostWordsAddOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostWordsAddOKBody post words add o k body
swagger:model PostWordsAddOKBody
*/
type PostWordsAddOKBody struct {

	// true if the word has been added. false means the word hasn't been added because it had been added before.
	Added bool `json:"added,omitempty"`
}

// Validate validates this post words add o k body
func (o *PostWordsAddOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post words add o k body based on context it is used
func (o *PostWordsAddOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostWordsAddOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostWordsAddOKBody) UnmarshalBinary(b []byte) error {
	var res PostWordsAddOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
